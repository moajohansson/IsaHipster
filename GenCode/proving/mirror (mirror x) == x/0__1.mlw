type x
type 'a Tree
type ('a, 'b) Fn
logic x2 : x Tree
logic x3 : x Tree
logic Leaf : 'a -> 'a Tree
logic proj_0_Leaf : 'a Tree -> 'a
logic Node : 'a Tree, 'a Tree -> 'a Tree
logic proj_0_Node : 'a Tree -> 'a Tree
logic proj_1_Node : 'a Tree -> 'a Tree
logic mirror : 'a2 Tree -> 'a2 Tree
logic mapa : ('a3, 'b) Fn, 'a3 Tree -> 'b Tree
logic app : ('x0, 'x1) Fn, 'x0 -> 'x1
axiom _ : mirror(mirror(x3)) = x3
axiom _ : mirror(mirror(x2)) = x2
axiom _ :
  forall x7 : ('x6, 'x5) Fn .
    forall x8 : 'x6 Tree . mapa(x7,mirror(x8)) = mirror(mapa(x7,x8))
axiom _ :
  forall x0 : 'a Tree .
    (x0 = Leaf(proj_0_Leaf(x0))
     or x0 = Node(proj_0_Node(x0),proj_1_Node(x0))
    )
axiom _ : forall x0 : 'a . proj_0_Leaf(Leaf(x0)) = x0
axiom _ :
  forall x0 : 'a Tree .
    forall x1 : 'a Tree . proj_0_Node(Node(x0,x1)) = x0
axiom _ :
  forall x0 : 'a Tree .
    forall x1 : 'a Tree . proj_1_Node(Node(x0,x1)) = x1
axiom _ :
  forall x0 : 'a .
    forall x1 : 'a Tree .
      forall x22 : 'a Tree . Leaf(x0) <> Node(x1,x22)
axiom _ : forall x9 : 'a2 . mirror(Leaf(x9)) = Leaf(x9)
axiom _ :
  forall l : 'a2 Tree .
    forall r : 'a2 Tree . mirror(Node(l,r)) = Node(mirror(r),mirror(l))
axiom _ :
  forall f : ('a3, 'b) Fn .
    forall x10 : 'a3 . mapa(f,Leaf(x10)) = Leaf(app(f,x10))
axiom _ :
  forall f : ('a3, 'b) Fn .
    forall l2 : 'a3 Tree .
      forall r2 : 'a3 Tree .
        mapa(f,Node(l2,r2)) = Node(mapa(f,l2),mapa(f,r2))
goal _ : mirror(mirror(Node(x2,x3))) = Node(x2,x3)